eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCgogIGNoZWNrOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gfAogICAgICAgIG1kNXN1bSAtd2MgLSA8PCBNRDVMSVNUCiAgICAgICAgYzNlZTA2OTc0ZTViYWVkY2UzMmMwODZkM2ZhZGU2OTkgIC5kcm9uZS5lbnYKICAgICAgICBjZTc1ODc5MzNmMjMwYTU3ZDlkMDAzYjJkMzhhNTE5MiAgLmRyb25lLnNzaAogICAgICAgIDAzYjRiNWRiZGNhNjkzMjdmOWY4YzJhMjJmNzIzYWI4ICBkb2NrZXIvZG9ja2VyLWVudHJ5cG9pbnQuc2gKICAgICAgICA0YWM5ZTQ2ZjYzMmIzMDAxNTljZjM5NDdkYzIyMmY1OCAgZG9ja2VyL0RvY2tlcmZpbGUKICAgICAgICBNRDVMSVNUCgogIGJ1aWxkOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBidWlsZCAtdCAiJElNQUdFX0JVSUxEIgogICAgICAgIC0tZmlsZSBkb2NrZXIvRG9ja2VyZmlsZQogICAgICAgIC0tbGFiZWwgYnJhbmNoPSIkRFJPTkVfQ09NTUlUX0JSQU5DSCIKICAgICAgICAtLWJ1aWxkLWFyZyBHSVRIVUJfQVVUSF9UT0tFTj0iJEdJVEhVQl9BVVRIX1RPS0VOIiAuCgogIHRlc3Q6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHdoaWxlICEgbmMgLXogMTI3LjAuMC4xIDMzMDY7IGRvIHNsZWVwIDE7IGRvbmUKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBydW4gLS1ybSAtLW5ldHdvcmsgImNvbnRhaW5lcjokSE9TVE5BTUUiCiAgICAgICAgLWUgQVBQX0VOVj10ZXN0CiAgICAgICAgLWUgQVBQX0RFQlVHPTAKICAgICAgICAtZSBGSVhUVVJFUz1mYWxzZQogICAgICAgIC1lIE1JR1JBVElPTj1mYWxzZQogICAgICAgIC1lIERBVEFCQVNFX0hPU1Q9bXlzcWwKICAgICAgICAtZSBEQVRBQkFTRV9QT1JUPTMzMDYKICAgICAgICAtZSBEQVRBQkFTRV9OQU1FPXN0bwogICAgICAgIC1lIERBVEFCQVNFX1BBU1NXT1JEPScnCiAgICAgICAgLWUgTUFJTEVSX1RSQU5TUE9SVD1zbXRwCiAgICAgICAgLWUgTUFJTEVSX0hPU1Q9MTI3LjAuMC4xCiAgICAgICAgLWUgTUFJTEVSX1VTRVI9JycKICAgICAgICAtZSBNQUlMRVJfUEFTU1dPUkQ9JycKICAgICAgICAtZSBTRUNSRVQ9VGhpc0lzTm90U2VjdXJlU2VjcmV0T25seUZvclRlc3QKICAgICAgICAiJElNQUdFX0JVSUxEIgoKICBwdWJsaXNoOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSBkb2NrZXIgbG9naW4gLXUiJEhVQl9MT0dJTiIgLXAiJEhVQl9QQVNTV09SRCIgcmVnaXN0cnkuZ2l0bGFiLmNvbQogICAgICAtIGRvY2tlciB0YWcgIiRJTUFHRV9CVUlMRCIgIiRJTUFHRV9QVVNIIgogICAgICAtIGRvY2tlciBwdXNoICIkSU1BR0VfUFVTSCIgPiAvZGV2L251bGwKICAgICAgLSA-KwogICAgICAgIGlmIFsgIm1hc3RlciIgPT0gIiREUk9ORV9DT01NSVRfQlJBTkNIIiBdOyB0aGVuCiAgICAgICAgICBkb2NrZXIgcm1pIC0tZm9yY2UgIiRJTUFHRV9QVVNIIgoKICAgICAgICAgIGRvY2tlciB0YWcgIiRJTUFHRV9CVUlMRCIgIiRJTUFHRV9MQVRFU1QiCiAgICAgICAgICBkb2NrZXIgcHVzaCAiJElNQUdFX0xBVEVTVCIgPiAvZGV2L251bGwKICAgICAgICBmaQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKCiAgY2xlYW46CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtID4rCiAgICAgICAgaWYgWyAic3VjY2VzcyIgPT0gIiREUk9ORV9CVUlMRF9TVEFUVVMiIF0gJiYgWyAicHVzaCIgPT0gIiREUk9ORV9CVUlMRF9FVkVOVCIgXTsgdGhlbgogICAgICAgICAgKGRvY2tlciBybWkgYGRvY2tlciBpbWFnZXMgLXEgLS1maWx0ZXIgYmVmb3JlPSIkSU1BR0VfQlVJTEQiIC0tZmlsdGVyIGxhYmVsPSJicmFuY2g9JERST05FX0NPTU1JVF9CUkFOQ0giICIkSU1BR0UiYCkKICAgICAgICBmaQogICAgICAtIGRvY2tlciBybWkgLS1mb3JjZSAiJElNQUdFX0JVSUxEIgogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIGZhaWx1cmUsIHN1Y2Nlc3MgXQoKICBkZXBsb3k6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHNvdXJjZSAuZHJvbmUuc3NoCiAgICAgIC0gc3NoICIkREVQTE9ZX0hPU1QiIGRvY2tlciBzZXJ2aWNlIHVwZGF0ZSAtLWltYWdlICIkSU1BR0VfUFVTSCIgIiRERVBMT1lfU0VSVklDRSIKICAgICAgLSBkb2NrZXIgcm1pIGBkb2NrZXIgaW1hZ2VzIC1xIC0tZmlsdGVyICJiZWZvcmU9JElNQUdFX1BVU0giICIkSU1BR0UiYCAyPiAvZGV2L251bGwgfHwgdHJ1ZQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKCnNlcnZpY2VzOgogIG15c3FsOgogICAgaW1hZ2U6IG1hcmlhZGIKICAgIGVudmlyb25tZW50OgogICAgICBNWVNRTF9EQVRBQkFTRTogc3ltZm9ueQogICAgICBNWVNRTF9BTExPV19FTVBUWV9QQVNTV09SRDogdHJ1ZQo.LKNFKRfrQY6ENgircULFLkyePluiNoTetJGhYSqus68