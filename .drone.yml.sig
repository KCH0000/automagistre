eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCgogIGNoZWNrOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gfAogICAgICAgIG1kNXN1bSAtd2MgLSA8PCBNRDVMSVNUCiAgICAgICAgYzNlZTA2OTc0ZTViYWVkY2UzMmMwODZkM2ZhZGU2OTkgIC5kcm9uZS5lbnYKICAgICAgICBjZTc1ODc5MzNmMjMwYTU3ZDlkMDAzYjJkMzhhNTE5MiAgLmRyb25lLnNzaAogICAgICAgIDAzYjRiNWRiZGNhNjkzMjdmOWY4YzJhMjJmNzIzYWI4ICBkb2NrZXIvZG9ja2VyLWVudHJ5cG9pbnQuc2gKICAgICAgICA0YWM5ZTQ2ZjYzMmIzMDAxNTljZjM5NDdkYzIyMmY1OCAgZG9ja2VyL0RvY2tlcmZpbGUKICAgICAgICBNRDVMSVNUCgogIGJ1aWxkOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBidWlsZCAtdCAiJElNQUdFX0JVSUxEIgogICAgICAgIC0tZmlsZSBkb2NrZXIvRG9ja2VyZmlsZQogICAgICAgIC0tbGFiZWwgYnJhbmNoPSIkRFJPTkVfQ09NTUlUX0JSQU5DSCIKICAgICAgICAtLWJ1aWxkLWFyZyBHSVRIVUJfQVVUSF9UT0tFTj0iJEdJVEhVQl9BVVRIX1RPS0VOIiAuCgogIHRlc3Q6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHdoaWxlICEgbmMgLXogMTI3LjAuMC4xIDMzMDY7IGRvIHNsZWVwIDE7IGRvbmUKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBydW4gLS1ybSAtLW5ldHdvcmsgImNvbnRhaW5lcjokSE9TVE5BTUUiCiAgICAgICAgLWUgQVBQX0VOVj10ZXN0CiAgICAgICAgLWUgQVBQX0RFQlVHPTAKICAgICAgICAtZSBGSVhUVVJFUz1mYWxzZQogICAgICAgIC1lIE1JR1JBVElPTj1mYWxzZQogICAgICAgIC1lIERBVEFCQVNFX0hPU1Q9bXlzcWwKICAgICAgICAtZSBEQVRBQkFTRV9QT1JUPTMzMDYKICAgICAgICAtZSBEQVRBQkFTRV9OQU1FPXN5bWZvbnkKICAgICAgICAtZSBEQVRBQkFTRV9VU0VSPXJvb3QKICAgICAgICAtZSBEQVRBQkFTRV9QQVNTV09SRD0nJwogICAgICAgIC1lIE1BSUxFUl9UUkFOU1BPUlQ9c210cAogICAgICAgIC1lIE1BSUxFUl9IT1NUPTEyNy4wLjAuMQogICAgICAgIC1lIE1BSUxFUl9VU0VSPScnCiAgICAgICAgLWUgTUFJTEVSX1BBU1NXT1JEPScnCiAgICAgICAgLWUgU0VDUkVUPVRoaXNJc05vdFNlY3VyZVNlY3JldE9ubHlGb3JUZXN0CiAgICAgICAgIiRJTUFHRV9CVUlMRCIKCiAgcHVibGlzaDoKICAgIGltYWdlOiBkb2NrZXIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIHNvdXJjZSAuZHJvbmUuZW52CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11IiRIVUJfTE9HSU4iIC1wIiRIVUJfUEFTU1dPUkQiIHJlZ2lzdHJ5LmdpdGxhYi5jb20KICAgICAgLSBkb2NrZXIgdGFnICIkSU1BR0VfQlVJTEQiICIkSU1BR0VfUFVTSCIKICAgICAgLSBkb2NrZXIgcHVzaCAiJElNQUdFX1BVU0giID4gL2Rldi9udWxsCiAgICAgIC0gPisKICAgICAgICBpZiBbICJtYXN0ZXIiID09ICIkRFJPTkVfQ09NTUlUX0JSQU5DSCIgXTsgdGhlbgogICAgICAgICAgZG9ja2VyIHJtaSAtLWZvcmNlICIkSU1BR0VfUFVTSCIKCiAgICAgICAgICBkb2NrZXIgdGFnICIkSU1BR0VfQlVJTEQiICIkSU1BR0VfTEFURVNUIgogICAgICAgICAgZG9ja2VyIHB1c2ggIiRJTUFHRV9MQVRFU1QiID4gL2Rldi9udWxsCiAgICAgICAgZmkKICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCgogIGNsZWFuOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-KwogICAgICAgIGlmIFsgInN1Y2Nlc3MiID09ICIkRFJPTkVfQlVJTERfU1RBVFVTIiBdICYmIFsgInB1c2giID09ICIkRFJPTkVfQlVJTERfRVZFTlQiIF07IHRoZW4KICAgICAgICAgIChkb2NrZXIgcm1pIGBkb2NrZXIgaW1hZ2VzIC1xIC0tZmlsdGVyIGJlZm9yZT0iJElNQUdFX0JVSUxEIiAtLWZpbHRlciBsYWJlbD0iYnJhbmNoPSREUk9ORV9DT01NSVRfQlJBTkNIIiAiJElNQUdFImApCiAgICAgICAgZmkKICAgICAgLSBkb2NrZXIgcm1pIC0tZm9yY2UgIiRJTUFHRV9CVUlMRCIKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBmYWlsdXJlLCBzdWNjZXNzIF0KCiAgZGVwbG95OgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSBzb3VyY2UgLmRyb25lLnNzaAogICAgICAtIHNzaCAiJERFUExPWV9IT1NUIiBkb2NrZXIgc2VydmljZSB1cGRhdGUgLS1pbWFnZSAiJElNQUdFX1BVU0giICIkREVQTE9ZX1NFUlZJQ0UiCiAgICAgIC0gZG9ja2VyIHJtaSBgZG9ja2VyIGltYWdlcyAtcSAtLWZpbHRlciAiYmVmb3JlPSRJTUFHRV9QVVNIIiAiJElNQUdFImAgMj4gL2Rldi9udWxsIHx8IHRydWUKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCgpzZXJ2aWNlczoKICBteXNxbDoKICAgIGltYWdlOiBtYXJpYWRiCiAgICBlbnZpcm9ubWVudDoKICAgICAgTVlTUUxfREFUQUJBU0U6IHN5bWZvbnkKICAgICAgTVlTUUxfQUxMT1dfRU1QVFlfUEFTU1dPUkQ6IHRydWUK.NuJWNAWiOo2uT4Ww5KJu3njZJfriMfeQH-EKruiBvrQ