eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCgogIGNoZWNrOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gfAogICAgICAgIGNhdCA8PCBMaXN0RU9GCiAgICAgICAgYzNlZTA2OTc0ZTViYWVkY2UzMmMwODZkM2ZhZGU2OTkgIC5kcm9uZS5lbnYKICAgICAgICBjZTc1ODc5MzNmMjMwYTU3ZDlkMDAzYjJkMzhhNTE5MiAgLmRyb25lLnNzaAogICAgICAgIGY5YzQ5YTA0NmI3YTYzYzgyMDdmNGVmZGQzNDUwNTBhICBkb2NrZXIvZG9ja2VyLWVudHJ5cG9pbnQuc2gKICAgICAgICBjYWNmMTQ3OTM5ZTA3ZmQzNzdhMjY4YzE4OTM3ZDI3MCAgZG9ja2VyL0RvY2tlcmZpbGUKICAgICAgICBMaXN0RU9GIHwgbWQ1c3VtIC13YyAtCgogIGJ1aWxkOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBidWlsZCAtdCAiJElNQUdFX0JVSUxEIgogICAgICAgIC0tZmlsZSBkb2NrZXIvRG9ja2VyZmlsZQogICAgICAgIC0tbGFiZWwgYnJhbmNoPSIkRFJPTkVfQ09NTUlUX0JSQU5DSCIKICAgICAgICAtLWJ1aWxkLWFyZyBHSVRIVUJfQVVUSF9UT0tFTj0iJEdJVEhVQl9BVVRIX1RPS0VOIiAuCgogIHRlc3Q6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHdoaWxlICEgbmMgLXogMTI3LjAuMC4xIDMzMDY7IGRvIHNsZWVwIDE7IGRvbmUKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBydW4gLS1ybSAtLW5ldHdvcmsgImNvbnRhaW5lcjokSE9TVE5BTUUiCiAgICAgICAgLWUgQVBQX0VOVj10ZXN0CiAgICAgICAgLWUgQVBQX0RFQlVHPTAKICAgICAgICAtZSBGSVhUVVJFUz1mYWxzZQogICAgICAgICIkSU1BR0VfQlVJTEQiCgogIHB1Ymxpc2g6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIGRvY2tlciBsb2dpbiAtdSIkSFVCX0xPR0lOIiAtcCIkSFVCX1BBU1NXT1JEIiByZWdpc3RyeS5naXRsYWIuY29tCiAgICAgIC0gZG9ja2VyIHRhZyAiJElNQUdFX0JVSUxEIiAiJElNQUdFX1BVU0giCiAgICAgIC0gZG9ja2VyIHB1c2ggIiRJTUFHRV9QVVNIIiA-IC9kZXYvbnVsbAogICAgICAtID4rCiAgICAgICAgaWYgWyAibWFzdGVyIiA9PSAiJERST05FX0NPTU1JVF9CUkFOQ0giIF07IHRoZW4KICAgICAgICAgIGRvY2tlciBybWkgLS1mb3JjZSAiJElNQUdFX1BVU0giCgogICAgICAgICAgZG9ja2VyIHRhZyAiJElNQUdFX0JVSUxEIiAiJElNQUdFX0xBVEVTVCIKICAgICAgICAgIGRvY2tlciBwdXNoICIkSU1BR0VfTEFURVNUIiA-IC9kZXYvbnVsbAogICAgICAgIGZpCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICBjbGVhbjoKICAgIGltYWdlOiBkb2NrZXIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIHNvdXJjZSAuZHJvbmUuZW52CiAgICAgIC0gPisKICAgICAgICBpZiBbICJzdWNjZXNzIiA9PSAiJERST05FX0JVSUxEX1NUQVRVUyIgXSAmJiBbICJwdXNoIiA9PSAiJERST05FX0JVSUxEX0VWRU5UIiBdOyB0aGVuCiAgICAgICAgICAoZG9ja2VyIHJtaSBgZG9ja2VyIGltYWdlcyAtcSAtLWZpbHRlciBiZWZvcmU9IiRJTUFHRV9CVUlMRCIgLS1maWx0ZXIgbGFiZWw9ImJyYW5jaD0kRFJPTkVfQ09NTUlUX0JSQU5DSCIgIiRJTUFHRSJgKQogICAgICAgIGZpCiAgICAgIC0gZG9ja2VyIHJtaSAtLWZvcmNlICIkSU1BR0VfQlVJTEQiCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgZmFpbHVyZSwgc3VjY2VzcyBdCgogIGRlcGxveToKICAgIGltYWdlOiBkb2NrZXIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIHNvdXJjZSAuZHJvbmUuZW52CiAgICAgIC0gc291cmNlIC5kcm9uZS5zc2gKICAgICAgLSBzc2ggIiRERVBMT1lfSE9TVCIgZG9ja2VyIHNlcnZpY2UgdXBkYXRlIC0taW1hZ2UgIiRJTUFHRV9QVVNIIiAiJERFUExPWV9TRVJWSUNFIgogICAgICAtIGRvY2tlciBybWkgYGRvY2tlciBpbWFnZXMgLXEgLS1maWx0ZXIgImJlZm9yZT0kSU1BR0VfUFVTSCIgIiRJTUFHRSJgIDI-IC9kZXYvbnVsbCB8fCB0cnVlCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgoKc2VydmljZXM6CiAgbXlzcWw6CiAgICBpbWFnZTogbWFyaWFkYgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE1ZU1FMX0RBVEFCQVNFOiBzeW1mb255CiAgICAgIE1ZU1FMX0FMTE9XX0VNUFRZX1BBU1NXT1JEOiB0cnVlCg.wllAPtqoaf6q7dtsv_vCBQl4m0lgdOU7-gj5OtZvjzc